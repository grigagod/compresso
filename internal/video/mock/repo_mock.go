// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/grigagod/compresso/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertTicket mocks base method.
func (m *MockRepository) InsertTicket(ctx context.Context, ticket *models.VideoTicket) (*models.VideoTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTicket", ctx, ticket)
	ret0, _ := ret[0].(*models.VideoTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTicket indicates an expected call of InsertTicket.
func (mr *MockRepositoryMockRecorder) InsertTicket(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTicket", reflect.TypeOf((*MockRepository)(nil).InsertTicket), ctx, ticket)
}

// InsertVideo mocks base method.
func (m *MockRepository) InsertVideo(ctx context.Context, video *models.Video) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVideo", ctx, video)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVideo indicates an expected call of InsertVideo.
func (mr *MockRepositoryMockRecorder) InsertVideo(ctx, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVideo", reflect.TypeOf((*MockRepository)(nil).InsertVideo), ctx, video)
}

// SelectTicketByID mocks base method.
func (m *MockRepository) SelectTicketByID(ctx context.Context, authorID, id uuid.UUID) (*models.VideoTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTicketByID", ctx, authorID, id)
	ret0, _ := ret[0].(*models.VideoTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTicketByID indicates an expected call of SelectTicketByID.
func (mr *MockRepositoryMockRecorder) SelectTicketByID(ctx, authorID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTicketByID", reflect.TypeOf((*MockRepository)(nil).SelectTicketByID), ctx, authorID, id)
}

// SelectTickets mocks base method.
func (m *MockRepository) SelectTickets(ctx context.Context, authorID uuid.UUID) ([]*models.VideoTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTickets", ctx, authorID)
	ret0, _ := ret[0].([]*models.VideoTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTickets indicates an expected call of SelectTickets.
func (mr *MockRepositoryMockRecorder) SelectTickets(ctx, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTickets", reflect.TypeOf((*MockRepository)(nil).SelectTickets), ctx, authorID)
}

// SelectVideoByID mocks base method.
func (m *MockRepository) SelectVideoByID(ctx context.Context, authorID, id uuid.UUID) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVideoByID", ctx, authorID, id)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVideoByID indicates an expected call of SelectVideoByID.
func (mr *MockRepositoryMockRecorder) SelectVideoByID(ctx, authorID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVideoByID", reflect.TypeOf((*MockRepository)(nil).SelectVideoByID), ctx, authorID, id)
}

// SelectVideos mocks base method.
func (m *MockRepository) SelectVideos(ctx context.Context, authorID uuid.UUID) ([]*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVideos", ctx, authorID)
	ret0, _ := ret[0].([]*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVideos indicates an expected call of SelectVideos.
func (mr *MockRepositoryMockRecorder) SelectVideos(ctx, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVideos", reflect.TypeOf((*MockRepository)(nil).SelectVideos), ctx, authorID)
}

// UpdateTicket mocks base method.
func (m *MockRepository) UpdateTicket(ctx context.Context, ticket *models.VideoTicket) (*models.VideoTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, ticket)
	ret0, _ := ret[0].(*models.VideoTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockRepositoryMockRecorder) UpdateTicket(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockRepository)(nil).UpdateTicket), ctx, ticket)
}
